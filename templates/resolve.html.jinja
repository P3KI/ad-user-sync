
{% macro dict_table(data) %}
  <table>
      {% for key, value in data.items() | rejectattr(1, 'none') %}
        <tr>
          <td>{{ key }}</td>
          <td>
            {% if value is mapping %}
              {{ dict_table(value, show_none) }}
            {% else %}
              {{ value }}
            {% endif %}
          </td>
        </tr>
      {% endfor %}
  </table>
{% endmacro %}

{% set type_descriptions = {
    'enable': 'Enable User',
    'join': 'Join Group',
    'name': 'Account Name Conflict',
} %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>AD Permission Sync</title>
    <link rel="stylesheet" href="static/normalize.css"></link>
    <style>
        :root {
            --cell-padding: 6px;
            --table-border-width: 1px;
        }

        body {
            font-family: monospace;
        }

        /* table */
        table, tr {
            width: 100%;
            border: none;
            border-collapse: collapse;
        }
        td {
            border: var(--table-border-width) solid black;
            padding: var(--cell-padding);
            overflow: hidden;
        }
        td:first-child {
            width: 1px;
            white-space: nowrap;
        }

        /* nested table */
        td > table {
            margin: calc(var(--cell-padding) * -1 - 1px);
            width: calc(100% + 14px);
        }
        td > table td {
            border-color: lightgray;
        }

        /* custom classes */
        .actions-table {
            width: 800px;
            margin: 20px auto;
        }
        .action-type {
            font-weight: bold;
            border: none;
            padding-top: 1.5em;
        }
        .accept-reject-buttons:not(:first-child) {
            margin-top: var(--cell-padding);
        }
        .password-input, .new-name-input {
            width: 350px;
        }
        .error {
            color: red;
        }
    </style>
</head>
<body>
    <table class="actions-table">
        {% for action in actions %}
            {% set action_id = loop.index0 %}
            <form
                id="{{ action_id }}"
                action-type="{{ action.type }}"
                class="action-form"
                method="post"
            >
                {# type independent action attributes #}
                <tr>
                    <td class="action-type" colspan="2">
                        {{ type_descriptions[action.type] }}
                        <input type="hidden" name="type" value="{{ action.type }}" />
                    </td>
                </tr>
                <tr>
                    <td>User</td>
                    <td>
                        {{ action.user }}
                        <input type="hidden" name="user" value="{{ action.user }}" />
                    </td>
                </tr>

                {# type dependent action attributes #}
                {% if action.type == 'join' %}
                    <tr>
                        <td>Group</td>
                        <td>
                            {{ action.group }}
                            <input type="hidden" name="group" value="{{ action.group }}" />
                        </td>
                    </tr>
                {% elif action.type == 'name' %}
                    <tr>
                        <td>User Attributes</td>
                        <td>{{ dict_table(action.attributes) }}</td>
                    </tr>
                    <tr>
                        <td>Conflict User</td>
                        <td>{{ action.conflict_user }}</td>
                    </tr>
                    <tr>
                        <td>Conflicting Account Name</td>
                        <td>
                            {{ action.name }}
                            <input type="hidden" name="name" value="{{ action.name }}" />
                        </td>
                    </tr>
                {% endif %}

                {# action error #}
                {% if action.error %}
                    <tr>
                        <td>Previous Error</td>
                        <td class="error">{{ action.error }}</td>
                    </tr>
                {% endif %}

                {# interaction #}
                <tr>
                    <td>Action</td>
                    <td>

                        {# type dependent fields #}
                        {% if action.type == 'enable' %}

                            <label for="{{action_id}}.password">Password</label>
                            <input
                                id="{{action_id}}.password"
                                class="password-input"
                                type="password"
                                name="password"
                            />
                            <button
                                id="{{action_id}}.show"
                                class="password-show-button"
                                type="button"
                            >üëÅ</button>
                            <button
                                id="{{action_id}}.generate"
                                class="password-generate-button"
                                type="button"
                            >üóò</button>

                        {% elif action.type == 'name' %}

                            <label for="{{action_id}}.new-name">New Name</label>
                            <input
                                id="{{action_id}}.new-name"
                                class="new-name-input"
                                type="text"
                                name="new_name"
                                value="{{ action.input_name }}"
                            />
                        {% endif %}

                        {# type independent accept/submit #}
                        <div class="accept-reject-buttons">
                            <button
                                id="{{action_id}}.accept"
                                class="accept-button"
                                type="submit"
                                name="accept"
                                value="true"
                            >Accept</button>
                            <button
                                id="{{action_id}}.reject"
                                class="reject-button"
                                type="submit"
                                name="accept"
                                value="false"
                            >Reject</button>
                        </div>
                    </td>
                </tr>
            </form>
        {% endfor %}
        </table>

    <script src="static/wordlist-5-dice-eff.js"></script>
    <script>
        const passwordWordCount = {{ password_word_count or 5 }}

        for (const form of document.getElementsByClassName('action-form')) {
            const actionId = form.id
            const actionType = form.attributes['action-type'].value
            const acceptButton = document.getElementById(actionId + '.accept')

            if (actionType === 'enable') {
                const passwordInput = document.getElementById(actionId + '.password')
                const showButton = document.getElementById(actionId + '.show')
                const generateButton = document.getElementById(actionId + '.generate')

                if (passwordInput.value.length === 0) passwordInput.value = generatePassword()
                acceptButton.disabled = !isPasswordValid(passwordInput.value)

                generateButton.addEventListener('click', () => {
                    passwordInput.value = generatePassword()
                })
                showButton.addEventListener('click', () => {
                    passwordInput.type = passwordInput.type === 'password' ? 'text' : 'password'
                })
                passwordInput.addEventListener('input', () => {
                    acceptButton.disabled = !isPasswordValid(passwordInput.value)
                })


            } else if (actionType === 'name') {
                const newNameInput = document.getElementById(actionId + '.new-name')
                const conflictName = form.querySelector('.accept-button')
                    {#.getElementsByName('name')#}
                console.log(conflictName)
                acceptButton.disabled = true
                newNameInput.addEventListener('input', () => {
                    acceptButton.disabled = newNameInput.value.length === 0 || newNameInput.value === conflictName
                })


            }
        }

        function isPasswordValid(password) {
            return password.length > 0
        }

        function generatePassword() {
            let password = ''
            for (let i = 0; i < passwordWordCount; i++) {
                const word = wordlist[Math.floor(Math.random() * wordlist.length)]
                password += word.charAt(0).toUpperCase() + word.substring(1)
            }
            return password
        }
    </script>
</body>
</html>

